# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2016-11-27 00:30
from __future__ import unicode_literals

import BorschApi.models
import BorschApi.user_manager
import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.TextField(blank=True, max_length=8)),
                ('seats', models.IntegerField(default=1)),
                ('status', models.BooleanField(default=False)),
                ('time_created', models.DateTimeField(blank=True, default=datetime.datetime(2016, 11, 27, 3, 30, 7, 603129))),
            ],
            options={
                'verbose_name': 'Бронирование',
                'verbose_name_plural': 'Бронь',
                'db_table': 'booking',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=15)),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
                'db_table': 'category',
            },
        ),
        migrations.CreateModel(
            name='Dish',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.FloatField()),
                ('name', models.CharField(max_length=15)),
                ('type', models.CharField(blank=True, max_length=20)),
                ('cuisine', models.CharField(blank=True, max_length=20)),
                ('photo', models.ImageField(blank=True, upload_to=BorschApi.models.get_file_path_dish)),
            ],
            options={
                'verbose_name': 'Блюдо',
                'verbose_name_plural': 'Блюда',
                'db_table': 'dish',
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
            ],
            options={
                'verbose_name': 'Отзывы',
                'verbose_name_plural': 'Отзыв',
                'db_table': 'feedback',
            },
        ),
        migrations.CreateModel(
            name='Ingridient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, max_length=20)),
            ],
            options={
                'verbose_name': 'Ингредиенты',
                'verbose_name_plural': 'Ингредиент',
                'db_table': 'ingridients',
            },
        ),
        migrations.CreateModel(
            name='IngridientsDishes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(default=0)),
                ('dish', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='BorschApi.Dish')),
                ('ingridient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ingridient', to='BorschApi.Ingridient')),
            ],
            options={
                'db_table': 'ingridients_dishes',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_price', models.FloatField()),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('payment_date', models.DateTimeField(auto_now_add=True)),
                ('is_paid', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Заказ',
                'verbose_name_plural': 'Заказы',
                'db_table': 'order',
            },
        ),
        migrations.CreateModel(
            name='OrderDishes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField(default=1)),
                ('dish', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_dishes', to='BorschApi.Dish')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='BorschApi.Order')),
            ],
            options={
                'db_table': 'order_dishes',
            },
        ),
        migrations.CreateModel(
            name='PhotoRestaurant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(upload_to=BorschApi.models.get_file_path_restaurant)),
            ],
            options={
                'verbose_name': 'Фотографии ресторанов',
                'verbose_name_plural': 'Фотография',
                'db_table': 'photo_restaurant',
            },
        ),
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=15)),
                ('description', models.TextField(blank=True)),
                ('regime', models.CharField(max_length=15)),
                ('coords', models.CharField(max_length=19)),
                ('seats', models.IntegerField(default=1)),
                ('check_sum', models.FloatField(default=0)),
                ('phone_number', models.CharField(max_length=11)),
                ('dishes', models.ManyToManyField(blank=True, related_name='restaurants', to='BorschApi.Dish')),
            ],
            options={
                'verbose_name': 'Ресторан',
                'verbose_name_plural': 'Рестораны',
                'db_table': 'restaurant',
            },
        ),
        migrations.CreateModel(
            name='TimeBooking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.TimeField()),
            ],
            options={
                'verbose_name': 'Время брони',
                'verbose_name_plural': 'Время брони',
                'db_table': 'time_booking',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, verbose_name='email address')),
                ('phone_number', models.CharField(max_length=11, unique=True, verbose_name='phone number')),
                ('first_name', models.CharField(max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('restaurant_name', models.CharField(blank=True, max_length=30, verbose_name='restaurant name')),
                ('is_admin_restaurant', models.BooleanField(default=False, verbose_name='admin restaurant')),
                ('is_waiter', models.BooleanField(default=False, verbose_name='waiter restaurant')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('restaurant', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='admins', to='BorschApi.Restaurant')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', BorschApi.user_manager.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='photorestaurant',
            name='restaurant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='BorschApi.Restaurant'),
        ),
        migrations.AddField(
            model_name='order',
            name='dishes',
            field=models.ManyToManyField(blank=True, related_name='orders', through='BorschApi.OrderDishes', to='BorschApi.Dish'),
        ),
        migrations.AddField(
            model_name='order',
            name='restaurant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='BorschApi.Restaurant'),
        ),
        migrations.AddField(
            model_name='order',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='ingridient',
            name='dishes',
            field=models.ManyToManyField(blank=True, related_name='ingridients_dishes', through='BorschApi.IngridientsDishes', to='BorschApi.Dish'),
        ),
        migrations.AddField(
            model_name='feedback',
            name='restaurant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to='BorschApi.Restaurant'),
        ),
        migrations.AddField(
            model_name='booking',
            name='restaurant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to='BorschApi.Restaurant'),
        ),
        migrations.AddField(
            model_name='booking',
            name='time',
            field=models.ForeignKey(blank=True, default=0, on_delete=django.db.models.deletion.CASCADE, related_name='booking', to='BorschApi.TimeBooking'),
        ),
        migrations.AddField(
            model_name='booking',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to=settings.AUTH_USER_MODEL),
        ),
    ]
